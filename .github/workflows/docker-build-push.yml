name: Docker Build and Push

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate version info
      id: version
      run: |
        # Get package.json version
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        
        # Generate timestamp version
        TIMESTAMP_VERSION=$(date '+%Y%m%d%H%M%S')
        
        # Get git commit hash
        COMMIT_HASH=${GITHUB_SHA::7}
        
        # Combine versions
        FULL_VERSION="${PACKAGE_VERSION}-${TIMESTAMP_VERSION}"
        
        echo "package_version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT
        echo "timestamp_version=${TIMESTAMP_VERSION}" >> $GITHUB_OUTPUT
        echo "full_version=${FULL_VERSION}" >> $GITHUB_OUTPUT
        echo "commit_hash=${COMMIT_HASH}" >> $GITHUB_OUTPUT
        echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ steps.version.outputs.timestamp_version }},enable={{is_default_branch}}
          type=raw,value=${{ steps.version.outputs.full_version }},enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_DATE=${{ steps.version.outputs.build_date }}
          VERSION=${{ steps.version.outputs.full_version }}
          VCS_REF=${{ steps.version.outputs.commit_hash }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Update version in package.json
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        # Update package.json with timestamp version for development builds
        npm version ${{ steps.version.outputs.full_version }} --no-git-tag-version
        
        # Create a version.json file for the application to read
        cat > public/version.json << EOF
        {
          "version": "${{ steps.version.outputs.full_version }}",
          "packageVersion": "${{ steps.version.outputs.package_version }}",
          "timestampVersion": "${{ steps.version.outputs.timestamp_version }}",
          "commitHash": "${{ steps.version.outputs.commit_hash }}",
          "buildDate": "${{ steps.version.outputs.build_date }}"
        }
        EOF

    - name: Commit version updates
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json public/version.json
        git diff --staged --quiet || git commit -m "Update version to ${{ steps.version.outputs.full_version }} [skip ci]"
        git push